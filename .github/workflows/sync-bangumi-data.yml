name: Sync Bangumi Data

on:
  schedule:
    - cron: '0 2 * * *'  # 每天 UTC 2:00 (北京时间 10:00)
  workflow_dispatch:  # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create R18 filter script
        run: |
          cat > filter_r18.jq << 'EOF'
          map(select(
            # 检查 nsfw 字段
            ((.nsfw // false) != true) and
            # 检查 tags 数组中的标签名称
            ((.tags // []) | 
              map(select(type == "object") | .name // "") | 
              map(select(type == "string")) |
              any(test("里番|18禁|18x|r18|成人|アダルト|エロ|h-game|eroge|adult|hentai|porn|xxx|sex"; "i")) | not
            ) and
            # 检查条目名称
            (((.name // "") | select(type == "string")) + ((.name_cn // "") | select(type == "string")) | 
              test("里番|18禁|18x|r18|成人|アダルト|エロ|h-game|eroge|adult|hentai|porn|xxx|sex"; "i") | not
            ) and
            # 检查 subject 对象中的名称（如果存在）
            (((.subject.name // "") | select(type == "string")) + ((.subject.name_cn // "") | select(type == "string")) | 
              test("里番|18禁|18x|r18|成人|アダルト|エロ|h-game|eroge|adult|hentai|porn|xxx|sex"; "i") | not
            )
          ))
          EOF

      - name: Create directories
        run: |
          mkdir -p public/data/bangumi
          mkdir -p tmp/bangumi

      - name: Sync Bangumi data
        env:
          BANGUMI_USER_ID: ${{ secrets.BANGUMI_USER_ID }}
          BANGUMI_TOKEN: ${{ secrets.BANGUMI_TOKEN }}
        run: |
          UPDATED=0
          
          # 定义所有类型和状态的组合
          declare -A TYPE_MAP=(
            ["book"]="1"
            ["anime"]="2" 
            ["music"]="3"
            ["game"]="4"
            ["real"]="6"
          )
          
          declare -A STATUS_MAP=(
            ["wish"]="1"
            ["collect"]="2"
            ["do"]="3"
            ["on_hold"]="4"
            ["dropped"]="5"
          )
          
          # 为每个类型创建目录
          for type_name in "${!TYPE_MAP[@]}"; do
            mkdir -p "tmp/bangumi/${type_name}"
            for status_name in "${!STATUS_MAP[@]}"; do
              mkdir -p "tmp/bangumi/${type_name}_${STATUS_MAP[$status_name]}"
            done
          done
          
          # 同步每个类型和状态的组合
          for type_name in "${!TYPE_MAP[@]}"; do
            type_id="${TYPE_MAP[$type_name]}"
            echo "Processing type: $type_name (API type: $type_id)"
            
            for status_name in "${!STATUS_MAP[@]}"; do
              status_id="${STATUS_MAP[$status_name]}"
              collection_key="${type_name}_${status_id}"
              
              echo "Syncing $collection_key..."
              
              # 获取远程数据总数
              remote_response=$(curl -s "https://api.bgm.tv/v0/users/${BANGUMI_USER_ID}/collections?subject_type=${type_id}&type=${status_id}&limit=1" \
                -H "Authorization: Bearer ${BANGUMI_TOKEN}" \
                -H "User-Agent: Fuwari-Bangumi-Sync/1.0")
              
              if [ $? -ne 0 ] || [ -z "$remote_response" ]; then
                echo "Failed to fetch data for $collection_key"
                continue
              fi
              
              remote_total=$(echo "$remote_response" | jq -r '.total // 0')
              
              # 检查本地文件
              local_file="public/data/bangumi/${collection_key}.json"
              if [ -f "$local_file" ]; then
                local_total=$(jq -r 'length' "$local_file")
              else
                local_total=0
                echo '[]' > "$local_file"
              fi
              
              echo "Processing $collection_key: remote_total=$remote_total, local_total=$local_total"
              
              # 如果数量不同，则更新
              if [ "$remote_total" -ne "$local_total" ] || [ "$remote_total" -gt 0 ]; then
                echo "Updating $collection_key..."
                
                # 创建临时文件
                temp_dir="tmp/bangumi/${collection_key}"
                mkdir -p "$temp_dir"
                temp_file="$temp_dir/data.json"
                echo '[]' > "$temp_file"
                
                if [ "$remote_total" -gt 0 ]; then
                  # 分页获取所有数据
                  limit=50
                  offset=0
                  
                  while [ $offset -lt $remote_total ]; do
                    echo "Fetching $collection_key: offset=$offset, limit=$limit"
                    
                    page_data=$(curl -s "https://api.bgm.tv/v0/users/${BANGUMI_USER_ID}/collections?subject_type=${type_id}&type=${status_id}&limit=${limit}&offset=${offset}" \
                      -H "Authorization: Bearer ${BANGUMI_TOKEN}" \
                      -H "User-Agent: Fuwari-Bangumi-Sync/1.0")
                    
                    if [ $? -ne 0 ] || [ -z "$page_data" ]; then
                      echo "Failed to fetch page data for $collection_key at offset $offset"
                      break
                    fi
                    
                    # 验证 API 响应格式
                    if ! echo "$page_data" | jq -e '.data' > /dev/null 2>&1; then
                      echo "Invalid API response format for $collection_key at offset $offset"
                      echo "Response: $page_data"
                      break
                    fi
                    
                    # 提取并验证数据
                    page_file="$temp_dir/page_${offset}.json"
                    echo "$page_data" | jq -r '.data // []' > "$page_file"
                    
                    # 验证提取的数据格式
                    if ! jq -e '. | type == "array"' "$page_file" > /dev/null 2>&1; then
                      echo "Invalid data format in page $offset for $collection_key"
                      rm -f "$page_file"
                      break
                    fi
                    
                    offset=$((offset + limit))
                    sleep 0.5  # 避免请求过于频繁
                  done
                  
                  # 合并所有页面数据
                  if ls "$temp_dir"/page_*.json 1> /dev/null 2>&1; then
                    echo "Merging page data for $collection_key..."
                    jq -s 'add' "$temp_dir"/page_*.json > "$temp_file"
                    
                    # 验证合并后的数据
                    if jq -e '. | type == "array"' "$temp_file" > /dev/null 2>&1; then
                      echo "Successfully merged $(jq length "$temp_file") items for $collection_key"
                    else
                      echo "Failed to merge data for $collection_key"
                      echo '[]' > "$temp_file"
                    fi
                  else
                    echo "No page files found for $collection_key"
                    echo '[]' > "$temp_file"
                  fi
                fi
                
                # 应用 R18 过滤
                if [ -f "$temp_file" ] && jq -e '. | type == "array"' "$temp_file" > /dev/null 2>&1; then
                  echo "Applying R18 filter to $collection_key..."
                  
                  # 先进行数据清理，确保所有字段都是预期的类型
                  jq 'map({
                    id: .id,
                    type: .type,
                    name: (.name // .subject.name // ""),
                    name_cn: (.name_cn // .subject.name_cn // ""),
                    image: (.image // .subject.image // ""),
                    url: (.url // .subject.url // ""),
                    short_summary: (.short_summary // .subject.short_summary // ""),
                    tags: ((.tags // .subject.tags // []) | map(select(type == "object") | {name: (.name // ""), count: (.count // 0)})),
                    score: (.score // 0),
                    comment: (.comment // ""),
                    private: (.private // false),
                    nsfw: (.nsfw // .subject.nsfw // false),
                    subject: (.subject // {}),
                    updated_at: (.updated_at // ""),
                    ep_status: (.ep_status // 0),
                    vol_status: (.vol_status // 0)
                  })' "$temp_file" > "${temp_file}.clean"
                  
                  # 应用 R18 过滤
                  if jq -f filter_r18.jq "${temp_file}.clean" > "${local_file}.tmp" 2>/dev/null; then
                    mv "${local_file}.tmp" "$local_file"
                    UPDATED=1
                    echo "Updated $collection_key with $(jq length "$local_file") items (filtered)"
                  else
                    echo "R18 filter failed for $collection_key, using unfiltered data"
                    cp "${temp_file}.clean" "$local_file"
                    UPDATED=1
                    echo "Updated $collection_key with $(jq length "$local_file") items (unfiltered)"
                  fi
                  
                  rm -f "${temp_file}.clean" "${local_file}.tmp"
                else
                  echo "Invalid or missing data file for $collection_key"
                  echo '[]' > "$local_file"
                fi
              else
                echo "$collection_key is up to date"
              fi
            done
          done
          
          # 生成汇总数据
          echo "Generating summary..."
          summary_file="public/data/bangumi/summary.json"
          
          # 创建汇总 JSON
          echo '{' > "$summary_file"
          first=true
          
          for type_name in "${!TYPE_MAP[@]}"; do
            for status_name in "${!STATUS_MAP[@]}"; do
              status_id="${STATUS_MAP[$status_name]}"
              collection_key="${type_name}_${status_id}"
              local_file="public/data/bangumi/${collection_key}.json"
              
              if [ "$first" = true ]; then
                first=false
              else
                echo ',' >> "$summary_file"
              fi
              
              if [ -f "$local_file" ] && jq -e '. | type == "array"' "$local_file" > /dev/null 2>&1; then
                echo "  \"$collection_key\": $(cat "$local_file")" >> "$summary_file"
              else
                echo "  \"$collection_key\": []" >> "$summary_file"
              fi
            done
          done
          
          echo '}' >> "$summary_file"
          
          # 清理临时文件
          rm -rf tmp/bangumi
          rm -f filter_r18.jq
          
          echo "UPDATED=$UPDATED" >> $GITHUB_ENV

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ "$UPDATED" -eq 1 ]; then
            git add public/data/bangumi/
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              git commit -m "Update Bangumi data - $(date +'%Y-%m-%d %H:%M:%S')"
              git push
              echo "Successfully updated Bangumi data"
            fi
          else
            echo "No updates needed"
          fi
