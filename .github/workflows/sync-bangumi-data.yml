name: Sync Bangumi Data

permissions:
  contents: write

on:
  schedule:
    - cron: "0 2 * * *"  # 每天 UTC+0 2点运行
  workflow_dispatch:

jobs:
  bangumi_sync:
    name: Sync Bangumi Data for All Types
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install jq if missing
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Ensure local files exist
        run: |
          types=("anime" "music" "game" "book" "real")
          statuses=("watching" "wish" "collect" "on_hold" "dropped")
          mkdir -p data/bangumi
          
          # 创建汇总文件
          if [ ! -f "data/bangumi/summary.json" ]; then
            echo 'Creating default summary.json'
            echo '{"data": {}, "lastUpdated": "", "totalItems": 0}' > "data/bangumi/summary.json"
          fi
          
          # 为每个类型和状态组合创建默认文件
          for type in "${types[@]}"; do
            for status in "${statuses[@]}"; do
              local_file="data/bangumi/${type}_${status}.json"
              if [ ! -f "$local_file" ]; then
                echo "Creating default JSON: $local_file"
                echo '{"data": [], "total": 0, "lastUpdated": ""}' > "$local_file"
              fi
            done
          done

      - name: Sync all type/status combinations
        run: |
          # Bangumi API 配置
          uid="${{ secrets.BANGUMI_UID }}"
          token="${{ secrets.BANGUMI_TOKEN }}"
          base="https://api.bgm.tv/v0"
          
          # 类型映射
          declare -A type_ids=(["anime"]=2 ["music"]=3 ["game"]=4 ["book"]=1 ["real"]=6)
          declare -A status_ids=(["watching"]=3 ["wish"]=1 ["collect"]=2 ["on_hold"]=4 ["dropped"]=5)
          
          types=("anime" "music" "game" "book" "real")
          statuses=("watching" "wish" "collect" "on_hold" "dropped")
          UPDATED=0
          
          for type in "${types[@]}"; do
            for status in "${statuses[@]}"; do
              echo "Syncing ${type}_${status}..."
              
              type_id=${type_ids[$type]}
              status_id=${status_ids[$status]}
              
              # 下载第一页数据检查总数
              curl -s -X GET "${base}/users/${uid}/collections?subject_type=${type_id}&type=${status_id}&limit=50&offset=0" \
                -H "Authorization: Bearer ${token}" \
                -o "${type}_${status}_check.json"
              
              # 检查 API 响应是否有效
              if ! jq -e '.total' "${type}_${status}_check.json" > /dev/null 2>&1; then
                echo "Invalid API response for ${type}_${status}, skipping..."
                continue
              fi
              
              remote_total=$(jq '.total // 0' "${type}_${status}_check.json")
              local_file="data/bangumi/${type}_${status}.json"
              local_total=$(jq '.total // 0' "$local_file" 2>/dev/null || echo 0)
              
              if [ "$remote_total" -eq "$local_total" ]; then
                echo "No update for ${type}_${status} (${remote_total} items)"
                continue
              fi
              
              echo "Updating ${type}_${status}: ${local_total} -> ${remote_total} items"
              UPDATED=1
              
              # 创建临时目录
              mkdir -p "tmp/bangumi/${type}_${status}"
              
              # 计算需要的页数
              limit=50
              pages=$(( (remote_total + limit - 1) / limit ))
              
              # 批量下载所有分页数据
              for ((i=0; i<pages; i++)); do
                offset=$((i * limit))
                echo "Downloading page $((i+1))/${pages} of ${type}_${status} (offset: ${offset})"
                
                curl -s -X GET "${base}/users/${uid}/collections?subject_type=${type_id}&type=${status_id}&limit=${limit}&offset=${offset}" \
                  -H "Authorization: Bearer ${token}" \
                  -o "tmp/bangumi/${type}_${status}/page_${i}.json"
                
                # 验证下载的文件
                if ! jq -e '.data' "tmp/bangumi/${type}_${status}/page_${i}.json" > /dev/null 2>&1; then
                  echo "Invalid response for page ${i}, creating empty data"
                  echo '{"data": []}' > "tmp/bangumi/${type}_${status}/page_${i}.json"
                fi
              done
              
              # 合并分页数据并过滤 R18 内容
              echo "Merging and filtering data for ${type}_${status}..."
              
              # 合并所有页面的数据
              jq -s '{
                data: map(select(.data != null) | .data[]) | map(select(.subject != null)) | unique_by(.subject_id),
                total: (map(.total)[0] // 0),
                lastUpdated: now | strftime("%Y-%m-%d %H:%M:%S")
              }' tmp/bangumi/${type}_${status}/*.json > "merged_${type}_${status}.json"
              
              # 应用 R18 过滤
              jq '{
                data: .data | map(select(
                  (.subject.nsfw != true) and
                  ((.subject.tags // []) | map(.name // "" | ascii_downcase) | 
                   any(test("里番|18禁|18x|r18|成人|アダルト|エロ|h-game|eroge")) | not) and
                  ((.subject.name // "") + (.subject.name_cn // "") | test("里番|18禁|18x|r18|成人|アダルト|エロ|h-game|eroge"; "i") | not)
                )),
                total: (.data | length),
                lastUpdated: .lastUpdated
              }' "merged_${type}_${status}.json" > "filtered_${type}_${status}.json"
              
              # 保存到目标目录
              cp "filtered_${type}_${status}.json" "$local_file"
              
              filtered_count=$(jq '.data | length' "$local_file")
              echo "Saved ${filtered_count} filtered items for ${type}_${status}"
            done
          done
          
          # 生成汇总数据
          if [ "$UPDATED" -eq 1 ]; then
            echo "Generating summary data..."
            
            jq -n --argjson timestamp "$(date +%s)" '{
              data: {},
              lastUpdated: ($timestamp | strftime("%Y-%m-%d %H:%M:%S")),
              totalItems: 0
            }' > "summary_base.json"
            
            total_items=0
            for type in "${types[@]}"; do
              type_data="{}"
              for status in "${statuses[@]}"; do
                file="data/bangumi/${type}_${status}.json"
                if [ -f "$file" ]; then
                  count=$(jq '.data | length' "$file")
                  total_items=$((total_items + count))
                  type_data=$(echo "$type_data" | jq --arg status "$status" --argjson count "$count" '. + {($status): $count}')
                fi
              done
              
              jq --arg type "$type" --argjson type_data "$type_data" '.data += {($type): $type_data}' "summary_base.json" > "summary_temp.json"
              mv "summary_temp.json" "summary_base.json"
            done
            
            jq --argjson total "$total_items" '.totalItems = $total' "summary_base.json" > "data/bangumi/summary.json"
            
            echo "Summary generated with ${total_items} total items"
          fi
          
          # 清理临时文件
          rm -rf tmp/ *.json
          
          # 如果无更新则跳过提交
          if [ "$UPDATED" -eq 0 ]; then
            echo "No updates. Exiting."
            exit 0
          fi

      - name: Commit and Push
        uses: EndBug/add-and-commit@v9
        with:
          message: 'chore: update Bangumi data (all types and statuses)'
          add: './data/bangumi'
